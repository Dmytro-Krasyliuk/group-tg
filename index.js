import TelegramBot from "node-telegram-bot-api";
import fs from "fs"; // file system
import dotenv from 'dotenv'
import { base } from "./base.js";
import { products } from "./products.js";
import { keyboards } from "./keyboards.js";

dotenv.config()

const bot = new TelegramBot(process.env.TOKEN, { polling: true });

let currentStep = "";

let myBasket = {
  products: [],
  sum: 0,
};

let userData = {
  name: "",
  lastname: "",
  products: [],
  phoneNumber: "",
  city: "",
  typePay: "",
  post: ``,
  postNumber: '',
  username: "",
};
// js -> ts 


// Char 'f'
//  String "tdsdf;kgj"

// 'text' 
// "a"


bot.setMyCommands([{ command: "start", description: "–ü–æ—á–∞—Ç–∏ –±–µ—Å—ñ–¥—É" }]);

let buttons = [];

for (let i = 0; i < 5; i++) {
  if (i == 1) {
    buttons.push([{ text: "Delete", callback_data: "buy-" }]);
  } else {
    buttons.push([{ text: "–ö—É–ø–∏—Ç–∏", callback_data: "buy-" }]);
  }
}

let newkb = {
  reply_markup: {
    inline_keyboard: buttons,
    resize_keyboard: true,
  },
};

bot.on("message", async function (message) {
  if (currentStep == "name") {
    bot.sendMessage(message.chat.id, "name +");
    userData.name = message.text;
    currentStep = "lastname";
  } else if (currentStep == "lastname") {
    bot.sendMessage(message.chat.id, "lastname +");
    userData.lastname = message.text;
    currentStep = "phoneNumber";
  } else if (currentStep == "phoneNumber") {
    bot.sendMessage(message.chat.id, "phoneNumber +");
    userData.phoneNumber = message.text;
    currentStep = "city";
  } else if (currentStep == "city") {
    bot.sendMessage(message.chat.id, "city +");
    userData.city = message.text;
    currentStep = "typePay";
  } else if (currentStep == "typePay") {
    bot.sendMessage(message.chat.id, "typePay +");
    userData.typePay = message.text;
    currentStep = "post";
  } else if (currentStep == "post") {
    bot.sendMessage(message.chat.id, "post +");
    userData.post = message.text;
    currentStep = "postNumber";
  } else if (currentStep == "postNumber") {
    bot.sendMessage(message.chat.id, "postNumber +");
    userData.postNumber = message.text;
    currentStep = "";
    console.log(userData);

    if (message.from.username != '') {
userData.username = message.from.username
    }

    let t = ''

    for (let i = 0; i < myBasket.products.length; i++) {
      t += myBasket.products[i].title + '\n'
    }

    let template = `
<b>–£—Ä–∞! –ü—Ä–∏–π—à–ª–∞ –Ω–æ–≤–∞ –∑–∞—è–≤–∫–∞!</b>

<b>–ü–Ü–ë:</b> ${userData.name}  ${userData.lastname}
<b>–ú—ñ—Å—Ç–æ:</b>  ${userData.city}
<b>–ü–æ—à—Ç–∞:</b>  ${userData.post}
<b>–ù–æ–º–µ—Ä –ø–æ—à—Ç–∏:</b>  ${userData.postNumber}
<b>–¢–∏–ø –æ–ø–ª–∞—Ç–∏:</b>  ${userData.typePay}
<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ:</b>  
${userData.phoneNumber}
@${userData.username}

<b>–¢–æ–≤–∞—Ä–∏:</b> 
${t}



`;

    bot.sendMessage(-1001571322958, template, { parse_mode: "HTML" });
  }

  console.log(message.text);
  // message.text = undefined;

  try {
    if (message.text == "/start") {
      if (base.counterProducts > products.length) {
        bot.sendMessage(
          message.chat.id,
          "<b>–¢–æ–≤–∞—Ä—ñ–≤ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î.</b>",
          { parse_mode: "HTML" }
        );
      }
      base.counterProducts += 2; // 10

      products.forEach(async function (product, index) {
        // —Ñ–æ—Ä–º—É–ª–∞ —è–∫–∞ —Ä–∞—Ö—É—î —Ü—ñ–Ω—É –∑–º–µ–Ω—à—É—é—á–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ü—ñ–Ω–∞ –Ω–∞ –¥–µ—è–∫–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫

        if (index >= base.counterProducts - 2 && index < base.counterProducts) {
          const currentPrice =
            product.price - (product.price * product.discount) / 100;

          const text = `
<b>${product.title.toUpperCase()}</b>
<s>${product.price}</s>
${currentPrice}

${product.description}
  
<code>–ö–æ–¥ —Ç–æ–≤–∞—Ä—É: ${product.id}</code>
  `;

          await bot.sendPhoto(message.chat.id, product.photo, {
            caption: text,
            parse_mode: "HTML",
            ...keyboards.keyboardProduct(product.id),
          });
        }
      });

      await bot.sendMessage(
        message.chat.id,
        "–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –±—ñ–ª—å—à–µ —Ç–æ–≤–∞—Ä—ñ–≤, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –Ω–∏–∂—á–µ",
        keyboards.keyboardNextProducts(myBasket)
      );
    }

    // null undefined
    else if (message.text.startsWith("üõí basket")) {
      let template = `
–í –≤–∞—à—ñ–π –∫–æ—Ä–∑–∏–Ω—ñ ${myBasket.products.length} —Ç–æ–≤–∞—Ä—ñ–≤.
–û—Å—å –ø–æ–≤–Ω–∏–π –ø–µ—Ä–µ–ª—ñ–∫ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤:
`;
      bot.sendMessage(
        message.chat.id,
        template,
        keyboards.basketProducts(myBasket.products)
      );
    } else if (message.text == "next ‚û°Ô∏è" || message.text == "show" ) {
      if (base.counterProducts > products.length) {
        bot.sendMessage(
          message.chat.id,
          "<b>–¢–æ–≤–∞—Ä—ñ–≤ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î.</b>",
          { parse_mode: "HTML" }
        );
      }
      base.counterProducts += 2; // 10

      products.forEach(async function (product, index) {
        // —Ñ–æ—Ä–º—É–ª–∞ —è–∫–∞ —Ä–∞—Ö—É—î —Ü—ñ–Ω—É –∑–º–µ–Ω—à—É—é—á–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ü—ñ–Ω–∞ –Ω–∞ –¥–µ—è–∫–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫

        if (index >= base.counterProducts - 2 && index < base.counterProducts) {
          const currentPrice =
            product.price - (product.price * product.discount) / 100;

          const text = `
<b>${product.title.toUpperCase()}</b>
<s>${product.price}</s>
${currentPrice}

${product.description}
  
<code>–ö–æ–¥ —Ç–æ–≤–∞—Ä—É: ${product.id}</code>
  `;

          await bot.sendPhoto(message.chat.id, product.photo, {
            caption: text,
            parse_mode: "HTML",
            ...keyboards.keyboardProduct(product.id),
          });
        }
      });

      await bot.sendMessage(
        message.chat.id,
        "–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –±—ñ–ª—å—à–µ —Ç–æ–≤–∞—Ä—ñ–≤, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –Ω–∏–∂—á–µ",
        keyboards.keyboardNextProducts(myBasket)
      );
    } else if (message.text == "‚¨ÖÔ∏è prev" || message.text == "prev") {
      base.counterProducts -= 2; // 10
      if (base.counterProducts < 0) {
        bot.sendMessage(
          message.chat.id,
          "<b>–¢–æ–≤–∞—Ä—ñ–≤ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î.</b>",
          { parse_mode: "HTML" }
        );
      }

      products.forEach(async function (product, index) {
        // —Ñ–æ—Ä–º—É–ª–∞ —è–∫–∞ —Ä–∞—Ö—É—î —Ü—ñ–Ω—É –∑–º–µ–Ω—à—É—é—á–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ü—ñ–Ω–∞ –Ω–∞ –¥–µ—è–∫–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫

        if (index >= base.counterProducts - 2 && index < base.counterProducts) {
          const currentPrice =
            product.price - (product.price * product.discount) / 100;

          const text = `
<b>${product.title.toUpperCase()}</b>
<s>${product.price}</s>
${currentPrice}

${product.description}
  
<code>–ö–æ–¥ —Ç–æ–≤–∞—Ä—É: ${product.id}</code>
  `;

          await bot.sendPhoto(message.chat.id, product.photo, {
            caption: text,
            parse_mode: "HTML",
            ...keyboards.keyboardProduct(product.id),
          });
        }
      });

      await bot.sendMessage(
        message.chat.id,
        "–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ –±—ñ–ª—å—à–µ —Ç–æ–≤–∞—Ä—ñ–≤, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –Ω–∏–∂—á–µ üëá",
        keyboards.keyboardNextProducts(myBasket)
      );
    }

    ("<b>text</b>");
    ("text</b>");
  } catch (error) {}
});

// –ü—Ä–∏ –∫–ª—ñ–∫—ñ –Ω–∞ —ñ–Ω–ª–∞–π–Ω–æ–≤—É (–ø—Ä–æ–∑–æ—Ä—É) –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
bot.on("callback_query", function (message) {
  // let a = bot.sendMessage(message.message.chat.id, message.data);
  if (message.data == "view-product") {
  }
  if (message.data == "completeOrder") {
    bot.sendMessage(message.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:");
    bot.sendMessage(message.message.chat.id, message.from.first_name);
    currentStep = "name";
    // email reklama email (1 000 000) 10 000 000 UAH 0.002% 0.003% (5000$) asdfsadfsdf114 ! Marketing
    console.log(message);
  }

  if (message.data == "deleteBasketItem") {
    // modal window open also onclick transparent button
    bot.answerCallbackQuery(message.id, {
      text: "–ë—ñ–ª—å—à–µ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î",
      show_alert: false,
    });

    bot.sendMessage(message.message.chat.id, "delete success");
  }

  if (message.data.startsWith("basketItem")) {
    const buttonText = message.message.reply_markup.inline_keyboard[0][0].text;
    const isChecked = buttonText.includes("‚úÖ");

    // –ó–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ "‚¨úÔ∏èfootbalka nano - 300 UAH" –∞–±–æ "‚úÖfootbalka nano - 300 UAH"
    const updatedButtonText = isChecked
      ? "‚¨úÔ∏è " + buttonText.slice(1)
      : "‚úÖ" + buttonText.slice(1);

    // –ö–æ–ø—ñ—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É inline_keyboard
    const inlineKeyboard = message.message.reply_markup.inline_keyboard;

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏
    const buttonIndexToChange = inlineKeyboard.findIndex((row) => {
      return row.some((button) => button.callback_data === message.data);
    });

    if (buttonIndexToChange !== -1) {
      // –ó–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–Ω–æ—ó –∫–Ω–æ–ø–∫–∏
      inlineKeyboard[buttonIndexToChange][0].text = updatedButtonText;

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
      bot.editMessageText(message.message.text, {
        chat_id: message.message.chat.id,
        message_id: message.message.message_id,
        parse_mode: "HTML", // –ó–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
        reply_markup: {
          inline_keyboard: inlineKeyboard,
        },
      });
    }
  }

  if (message.data.startsWith("buy-")) {
    let id = message.data.slice(4);
    let title;

    products.forEach((product) => {
      if (product.id == id) {
        let r = product.price - (product.price * product.discount) / 100;
        myBasket.sum += r
        title = product.title

        myBasket.products.push({
          title: product.title,
          price: r,
          id: product.id
        });
      }

    });

    bot.sendMessage(
      message.message.chat.id,
      `–í–∏ –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä ${title}`,
      keyboards.keyboardNextProducts(myBasket)
    );
  }

  if (message.data.startsWith("favorites-")) {
    let id = message.data.slice(10);
    let title;
    products.forEach((product) => {
      if (product.id == id) {
        title = product.title;
      }
    });
    bot.sendMessage(
      message.message.chat.id,
      `–í–∏ –¥–æ–¥–∞–ª–∏ –≤ –æ–±—Ä–∞–Ω–µ —Ç–æ–≤–∞—Ä ${title}`
    );
  }

  if (message.data.startsWith("chat-")) {
    let id = message.data.slice(5);
    let title;
    products.forEach((product) => {
      if (product.id == id) {
        title = product.title;
      }
    });
    bot.sendMessage(
      message.message.chat.id,
      `–í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä ${title} . –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?`
    );
  }
});
